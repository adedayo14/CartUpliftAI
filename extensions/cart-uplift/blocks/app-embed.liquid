{% comment %} Cart Uplift â€“ Smart Cart App Embed {% endcomment %}
{% comment %} Version: Testing commit 235b8d3 - Recommendations scroll fix {% endcomment %}

<link rel="stylesheet" href="{{ 'cart-uplift.css' | asset_url }}">

  {%- comment -%}
    Preview and minor editor-only utilities
  {%- endcomment -%}
  <style>
    /* Preview items styling for theme editor */
    .cartuplift-preview-item {
      opacity: 0.7;
      position: relative;
    }
    .cartuplift-preview-item .cartuplift-item-price-actions {
      position: relative;
    }
    .cartuplift-preview-item .cartuplift-item-price-actions::after {
      content: "PREVIEW";
      position: absolute;
      top: 75%;
      right: 0;
      transform: translateY(-50%);
      background: #00C851;
      color: white;
      font-size: 11px;
      padding: 4px 10px;
      border-radius: 16px;
      font-weight: 600;
      z-index: 10;
      line-height: 1;
      white-space: nowrap;
      box-shadow: 0 2px 6px rgba(0, 200, 81, 0.4);
      border: 1px solid #00A843;
    }
    .cartuplift-progress-text {
      color: #121212 !important;
      font-weight: 500;
      font-size: 14px;
      line-height: 1.4;
    }
    .cartuplift-gift-price {
      border: none !important;
      outline: none !important;
      box-shadow: none !important;
    }
  </style>

  <script>
    // Preload settings BEFORE loading the main script so it can auto-initialize
    (function(){
      try {
        // Detect Shopify theme editor design mode as early as possible
        var __isDesignMode = !!(window.Shopify && window.Shopify.designMode);

  window.CartUpliftSettings = Object.assign({}, window.CartUpliftSettings || {}, {
          // Cart Behavior (controlled by theme setting in design mode)
          keepCartOpen: __isDesignMode ? {{ block.settings.keep_cart_open | json }} : false,
          autoOpenCart: {{ block.settings.auto_open_cart | json }},
          
          // Incentives
          incentiveType: {{ block.settings.incentive_type | json }},
          // cart-uplift.js expects these exact keys
          enableFreeShipping: {{ block.settings.enable_free_shipping_progress | json }},
          freeShippingText: {{ block.settings.progress_message | json }},
          freeShippingAchievedText: {{ block.settings.success_message | json }},
          freeShippingMaintainText: {{ block.settings.free_shipping_maintain_message | json }},
          freeShippingThreshold: {{ block.settings.free_shipping_threshold | json }},
                  shippingBarBackgroundColor: {{ block.settings.progress_background_color | json }},
          shippingBarColor: {{ block.settings.progress_bar_color | json }},
          // gift gating (only used when incentive type is gifts/combined)
          // giftThresholds will be set below as a JSON string when applicable

          // Gift & Rewards Settings
          allRewardsAchievedText: {{ block.settings.all_rewards_success_message | json }},
          giftThreshold: {{ block.settings.gift_threshold | json }},
          giftProgressText: {{ block.settings.gift_progress_message | json }},
          giftAchievedText: {{ block.settings.gift_success_message | json }},
          giftValueProgressText: {{ block.settings.gift_value_progress_message | json }},
          giftNoticeText: {{ block.settings.gift_notice_text | json }},

          // Cart Features (enabled when text is not blank)
          discountLinkText: {{ block.settings.discount_link_text | json }},
          enableDiscountCode: {{ block.settings.discount_link_text | json | size }} > 0,
          notesLinkText: {{ block.settings.order_notes_link_text | json }},
          enableNotes: {{ block.settings.order_notes_link_text | json | size }} > 0,
          
          // Express Checkout (always enabled)
          enableExpressCheckout: true,

          // Text styling
          enableProductTitleCaps: {{ block.settings.enable_product_title_caps | json }},

          // Cart styling
          cartBackgroundColor: {{ block.settings.cart_background_color | json }},

          // App behavior
          enableApp: true,
          designMode: __isDesignMode,
          
          // Currency settings
          shopCurrency: {{ shop.currency | json }},
          moneyFormat: {{ shop.money_format | json }},
          moneyWithCurrencyFormat: {{ shop.money_with_currency_format | json }},
          
          // Product recommendations: controlled by ML/app only (no theme editor overrides)
        });

        // Theme no longer controls manual recommendations or layout; ML/app settings apply

        // Notify any listeners immediately that settings have (re)loaded
        try { document.dispatchEvent(new CustomEvent('cartuplift:settings:updated')); } catch (_) {}

        // Set global money format for formatMoney function
        window.CartUpliftMoneyFormat = {{ shop.money_format | json }};

        // Sticky cart settings are now properly configured above in the main settings object

        // In design mode we greatly reduce side-effects so the iframe never triggers X-Frame-Options failures
        if (__isDesignMode) {
          try {
            // Disable analytics / polling style behaviors and any automatic gift auto-add logic later can check this flag
            window.CartUpliftSettings.enableAnalytics = false;
            window.CartUpliftSettings.suppressAutoAdd = true;
            
            // Keep cart open setting is now controlled by theme setting, not forced
            console.info('[CartUplift] Theme editor mode: keepCartOpen =', window.CartUpliftSettings.keepCartOpen);
            
            // Prevent accidental redirects initiated extremely early
            window.addEventListener('click', function(e){
              var t = e.target;
              if (!t) return;
              if (t.closest && t.closest('.cartuplift-checkout-btn, [data-checkout], form[action*="/checkout"], a[href*="/checkout"]')) {
                e.preventDefault();
                e.stopPropagation();
                console.info('[CartUplift] Checkout suppressed in theme editor (design mode).');
              }
            }, true);
          } catch(__e) { console.warn('[CartUplift] Design mode safe-guards partial failure', __e); }
        }

        // Normalize free shipping message placeholder to the token cart-uplift.js replaces
        try {
          const token = `{% raw %}{{ amount }}{% endraw %}`;
          if (typeof window.CartUpliftSettings.freeShippingText === 'string') {
            window.CartUpliftSettings.freeShippingText = window.CartUpliftSettings.freeShippingText.replace('{amount}', token);
          }
        } catch (_) {}

        // Parse combined gift messages (progress | success)
        try {
          const amountToken = `{% raw %}{{ amount }}{% endraw %}`;
          const productToken = `{% raw %}{{ title }}{% endraw %}`;
          const combinedMessage = {{ block.settings.gift_progress_message | json }} || "Spend {amount} more to unlock {product}! | ðŸŽ‰ {product} unlocked!";
          const [progressMsg, successMsg] = combinedMessage.split('|').map(s => s.trim());
          
          window.CartUpliftSettings.giftProgressText = progressMsg || "Spend {amount} more to unlock {product}!";
          window.CartUpliftSettings.giftAchievedText = successMsg || "ðŸŽ‰ {product} unlocked!";
          
          // Replace placeholders
          if (typeof window.CartUpliftSettings.giftProgressText === 'string') {
            window.CartUpliftSettings.giftProgressText = window.CartUpliftSettings.giftProgressText
              .replace('{amount}', amountToken)
              .replace('{product}', productToken)
              .replace('{title}', productToken); // backward compatibility
          }
          if (typeof window.CartUpliftSettings.giftAchievedText === 'string') {
            window.CartUpliftSettings.giftAchievedText = window.CartUpliftSettings.giftAchievedText
              .replace('{product}', productToken)
              .replace('{title}', productToken); // backward compatibility
          }
        } catch (_) {}

        // Map incentive type to the script's progressBarMode values
        try {
          const type = window.CartUpliftSettings.incentiveType;
          const mode = type === 'gifts' ? 'gift-gating' : (type === 'combined' ? 'combined' : 'free-shipping');
          window.CartUpliftSettings.progressBarMode = mode;
        } catch (_) {}

        // Configure gift gating thresholds only when needed
        try {
          const giftAmount = {{ block.settings.gift_threshold | json }};
          const type = window.CartUpliftSettings.incentiveType;
          // Inject product selection from the theme setting if provided
          // Liquid will output these JS vars safely whether set or not
          {% if block.settings.gift_product %}
          var __giftProductId = {{ block.settings.gift_product.id | json }};
          var __giftProductHandle = {{ block.settings.gift_product.handle | json }};
          var __giftProductTitle = {{ block.settings.gift_product.title | json }};
          var __giftVariantId = {{ block.settings.gift_product.selected_or_first_available_variant.id | json }};
          var __giftVariantTitle = {{ block.settings.gift_product.selected_or_first_available_variant.title | json }};
          var __giftVariantPrice = {{ block.settings.gift_product.selected_or_first_available_variant.price | json }}; // cents
          {% else %}
          var __giftProductId = null;
          var __giftProductHandle = null;
          var __giftProductTitle = null;
          var __giftVariantId = null;
          var __giftVariantTitle = null;
          var __giftVariantPrice = null;
          {% endif %}

          if ((type === 'gifts' || type === 'combined') && Number(giftAmount)) {
            const threshold = {
              id: `gift-${__giftProductId || ('amount-' + Number(giftAmount))}`,
              type: 'product',
              amount: Number(giftAmount),
              title: __giftProductTitle || 'Free Gift',
              productId: __giftProductId,
              productHandle: __giftProductHandle,
              variantId: __giftVariantId,
              variantTitle: __giftVariantTitle,
              price: __giftVariantPrice
      }
    })();
  </script>

  <script>
    // API Bridge: Fetch database settings from app and merge with theme settings
    (async function loadAppSettings() {
      try {
        const response = await fetch('/apps/cart-uplift/api/settings?shop={{ shop.permanent_domain }}');
        if (response.ok) {
          const dbSettings = await response.json();
          
          // Merge database settings with theme settings (theme settings take priority for duplicates)
          window.CartUpliftSettings = Object.assign(window.CartUpliftSettings || {}, {
            // ML & AI Settings
            enableMLRecommendations: dbSettings.enableMLRecommendations,
            mlPersonalizationMode: dbSettings.mlPersonalizationMode,
            mlPrivacyLevel: dbSettings.mlPrivacyLevel,
            enableBehaviorTracking: dbSettings.enableBehaviorTracking,
            enableAdvancedPersonalization: dbSettings.enableAdvancedPersonalization,
            mlDataRetentionDays: dbSettings.mlDataRetentionDays,
            
            // Threshold Settings
            hideRecommendationsAfterThreshold: dbSettings.hideRecommendationsAfterThreshold,
            enableThresholdBasedSuggestions: dbSettings.enableThresholdBasedSuggestions,
            thresholdSuggestionMode: dbSettings.thresholdSuggestionMode,
            
            // Button Text Overrides
            checkoutButtonText: dbSettings.checkoutButtonText,
            addButtonText: dbSettings.addButtonText,
            applyButtonText: dbSettings.applyButtonText,
            
            // Gift Settings
            giftPriceText: dbSettings.giftPriceText,
            
            _dbSettingsLoaded: true
          });
          
          // Notify any listeners that settings have been updated with database values
          document.dispatchEvent(new CustomEvent('cartuplift:settings:updated'));
          console.info('[CartUplift] App settings loaded successfully');
        } else {
          console.warn('[CartUplift] App settings unavailable (status:', response.status, '), using theme defaults');
        }
      } catch (error) {
        console.warn('[CartUplift] App settings fetch failed, using theme defaults:', error.message);
      }
    })();
  </script>

  <script>
    // Disable native Shopify theme cart animations
    (function() {
      try {
        // Override any existing cart animation functions
        if (window.theme && window.theme.cart && typeof window.theme.cart.addToCartAnimation === 'function') {
          window.theme.cart.addToCartAnimation = function() { /* disabled */ };
        }
        
        // Disable common animation classes
        const style = document.createElement('style');
        style.textContent = `
          .cart-drawer__item-animate,
          .cart-item-animate,
          .cart-animation,
          .add-to-cart-animation,
          [data-cart-animation] {
            animation: none !important;
            transition: none !important;
            transform: none !important;
          }
        `;
        document.head.appendChild(style);
        
        // Intercept and disable performance measurements that trigger animations
        if (window.performance && window.performance.measure) {
          const originalMeasure = window.performance.measure;
          window.performance.measure = function(name, ...args) {
            if (name && (name.includes('cart') || name.includes('add'))) {
              return; // Skip cart-related performance measurements
            }
            return originalMeasure.apply(this, [name, ...args]);
          };
        }
        
        // Intercept early cart page navigation
        const originalPushState = history.pushState;
        const originalReplaceState = history.replaceState;
        
        history.pushState = function(state, title, url) {
          if (url && url.toString().includes('/cart') && !url.toString().includes('/cart/add')) {
            console.log('ðŸš« Early cart navigation blocked (pushState)');
            if (window.cartUpliftDrawer) {
              window.cartUpliftDrawer.openDrawer();
            }
            return;
          }
          return originalPushState.apply(this, arguments);
        };
        
        history.replaceState = function(state, title, url) {
          if (url && url.toString().includes('/cart') && !url.toString().includes('/cart/add')) {
            console.log('ðŸš« Early cart navigation blocked (replaceState)');
            if (window.cartUpliftDrawer) {
              window.cartUpliftDrawer.openDrawer();
            }
            return;
          }
          return originalReplaceState.apply(this, arguments);
        };

        console.log('ðŸš« Native Shopify cart animations disabled');
      } catch (e) {
        console.warn('Failed to disable native animations:', e);
      }
    })();
  </script>

  {%- comment -%} Cache-busted version to ensure fresh schema loads {%- endcomment -%}
  <script src="{{ 'cart-uplift.js' | asset_url }}?v=theme-editor-autoopen-2025-10-09" defer></script>

  <script>
    // Post-load configuration and resilience
    document.addEventListener('DOMContentLoaded', function() {
      try {
        const __isDesignMode = !!(window.Shopify && window.Shopify.designMode);

        // If the drawer didn't auto-init (e.g., due to timing), initialize it now
        if (!window.cartUpliftDrawer && window.CartUpliftDrawer && window.CartUpliftSettings) {
          try {
            window.cartUpliftDrawer = new window.CartUpliftDrawer(window.CartUpliftSettings);
          } catch(initErr) {
            console.error('[CartUplift] Drawer init failed', initErr);
          }
        }
        // Notify of settings (for late listeners)
        document.dispatchEvent(new CustomEvent('cartuplift:settings:updated'));

        // Theme editor convenience: Keep cart open when toggle is enabled
        if (__isDesignMode && window.cartUpliftDrawer) {
          const keepCartOpenSetting = window.CartUpliftSettings.keepCartOpen;
          console.info('[CartUplift] Theme editor mode - keepCartOpen setting:', keepCartOpenSetting);
          
          // Only auto-open if the setting is enabled
          if (keepCartOpenSetting && window.Shopify && window.Shopify.designMode) {
            const openIfNeeded = (reason) => {
              if (window.cartUpliftDrawer && !window.cartUpliftDrawer.isOpen) {
                console.info('[CartUplift] Theme editor: Auto-opening cart (' + reason + ')');
                window.cartUpliftDrawer.openDrawer();
              }
            };

            // Ensure drawer pops open shortly after load
            setTimeout(() => openIfNeeded('initial load'), 600);

            // Re-open periodically so the cart stays visible while editing
            const editorAutoOpenInterval = setInterval(() => {
              openIfNeeded('keepCartOpen interval');
            }, 2500); // slightly faster cadence for responsiveness

            // Tear down interval if theme editor switches context out of design mode
            const designModeWatcher = () => {
              if (!window.Shopify || !window.Shopify.designMode) {
                clearInterval(editorAutoOpenInterval);
                clearInterval(designModeCheckInterval);
                document.removeEventListener('shopify:section:load', designModeSectionHandler);
                document.removeEventListener('shopify:section:unload', designModeSectionHandler);
              }
            };

            const designModeSectionHandler = () => {
              setTimeout(() => openIfNeeded('section change'), 400);
            };

            document.addEventListener('shopify:section:load', designModeSectionHandler);
            document.addEventListener('shopify:section:unload', designModeSectionHandler);

            const designModeCheckInterval = setInterval(designModeWatcher, 5000);
            setTimeout(designModeWatcher, 30000);
          } else if (!keepCartOpenSetting) {
            console.info('[CartUplift] Theme editor: keepCartOpen is OFF - cart will not auto-open');
          }
        }

        // Preserve native cart UI; intercept clicks to open our drawer instead
        if (typeof window.cartUpliftDrawer?.preventThemeCartUplift === 'function' && !__isDesignMode) {
          window.cartUpliftDrawer.preventThemeCartUplift();
        }

        // Optional analytics hooks
        if (window.CartUpliftSettings && window.CartUpliftSettings.enableAnalytics) {
          document.addEventListener('cartuplift:opened', function() {
            if (typeof gtag !== 'undefined') {
              gtag('event', 'view_cart', { event_category: 'Cart Uplift', event_label: 'Cart Drawer Opened' });
            }
          });
          document.addEventListener('cartuplift:item_added', function(e) {
            if (typeof gtag !== 'undefined') {
              gtag('event', 'add_to_cart', { event_category: 'Cart Uplift', event_label: 'Item Added', value: e.detail?.price });
            }
          });
        }
      } catch (error) {
        console.error('Cart Uplift App Embed failed to initialize:', error);
      }
    });

    // Comprehensive cart link interception - final fallback
    document.addEventListener('click', function(e) {
      // Check if the clicked element or any parent is a cart link
      let element = e.target;
      while (element && element !== document) {
        const href = element.getAttribute('href');
        if (href && (href === '/cart' || href.includes('/cart?') || href.includes('/cart#'))) {
          console.log('ðŸš« Final fallback - cart link blocked:', element);
          e.preventDefault();
          e.stopPropagation();
          e.stopImmediatePropagation();
          
          if (window.cartUpliftDrawer) {
            window.cartUpliftDrawer.openDrawer();
          }
          return false;
        }
        element = element.parentElement;
      }
    }, true);
  </script>

  {%- comment -%}
    Hidden probe to let Shopify render official dynamic checkout buttons (PayPal, Shop Pay).
    We'll relocate these into the cart drawer when it opens so clicks use Shopify's checkout flow.
  {%- endcomment -%}
  <div id="cartuplift-payment-probe" style="position:absolute;left:-9999px;top:-9999px;opacity:0;pointer-events:none;">
    <div class="additional-checkout-buttons" data-shopify="payment-button"></div>
  </div>

{% schema %}
{
  "name": "CartUplift",
  "target": "body",
  "settings": [
    {
      "type": "header",
      "content": "Theme editor"
    },
    {
      "type": "checkbox",
      "id": "keep_cart_open",
      "label": "Keep cart open while editing",
      "info": "Keeps the drawer visible in the theme editor.",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "auto_open_cart",
      "label": "Open cart after add to cart",
      "info": "Automatically show the cart when an item is added.",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "enable_product_title_caps",
      "label": "Uppercase cart titles",
      "info": "Makes product titles and the CART header uppercase.",
      "default": false
    },
    {
      "type": "color",
      "id": "cart_background_color",
      "label": "Cart background color",
      "info": "Background color for the cart drawer.",
      "default": "#FFFFFF"
    },
    {
      "type": "header",
      "content": "Cart goal type"
    },
    {
      "type": "select",
      "id": "incentive_type",
      "label": "Choose goal",
      "options": [
        {
          "value": "combined",
          "label": "Free shipping + gifts"
        },
        {
          "value": "free_shipping",
          "label": "Free shipping goal"
        },
        {
          "value": "gifts",
          "label": "Gift with purchase"
        }
      ],
      "default": "free_shipping"
    },
    {
      "type": "header",
      "content": "Free shipping goal"
    },
    {
      "type": "checkbox",
      "id": "enable_free_shipping_progress",
      "label": "Show progress bar",
      "default": true
    },
    {
      "type": "number",
      "id": "free_shipping_threshold",
      "label": "Free shipping minimum",
      "default": 100
    },
    {
      "type": "text",
      "id": "progress_message",
      "label": "Progress message",
      "default": "You're {amount} away from free shipping!"
    },
    {
      "type": "text",
      "id": "success_message",
      "label": "Success message",
      "default": "You've unlocked free shipping!"
    },
    {
      "type": "color",
      "id": "progress_bar_color",
      "label": "Progress bar color",
      "default": "#121212"
    },
    {
      "type": "color",
      "id": "progress_background_color",
      "label": "Progress bar background",
      "default": "#E5E5E5"
    },
    {
      "type": "header",
      "content": "Gift with purchase"
    },
    {
      "type": "number",
      "id": "gift_threshold",
      "label": "Gift unlock amount ($)",
      "default": 150
    },
    {
      "type": "product",
      "id": "gift_product",
      "label": "Gift product"
    },
    {
      "type": "text",
      "id": "gift_progress_message", 
      "label": "Message templates (progress | success)",
      "default": "Spend {amount} more to unlock {product}! | ðŸŽ‰ {product} unlocked!"
    },
    {
      "type": "text",
      "id": "gift_value_message",
      "label": "Value message",
      "default": "You're saving {value}!"
    },
    {
      "type": "text",
      "id": "all_rewards_success_message",
      "label": "All rewards message",
      "default": "âœ“ You've saved {value}!"
    },
    {
      "type": "header",
      "content": "Text customization"
    },
    {
      "type": "text",
      "id": "discount_link_text",
      "label": "Promo code link label",
      "default": "+ Got a promotion code?"
    },
    {
      "type": "text",
      "id": "order_notes_link_text",
      "label": "Order note link label",
      "default": "+ Add order notes"
    }
  ]
}
{% endschema %}